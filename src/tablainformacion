# Tabla de palabras clave y funciones integradas en Python
# Guardar como: tabla_python.py

def mostrar_tabla():
    print("\n=== üîë Palabras clave de Python ===\n")
    keywords = {
        "False": "Valor booleano falso",
        "True": "Valor booleano verdadero",
        "None": "Ausencia de valor",
        "and": "Operador l√≥gico Y",
        "or": "Operador l√≥gico O",
        "not": "Operador l√≥gico NO",
        "if": "Condicional",
        "elif": "Sino, si...",
        "else": "Sino...",
        "for": "Bucle (recorre secuencias)",
        "while": "Bucle mientras condici√≥n sea verdadera",
        "break": "Rompe un bucle",
        "continue": "Salta a la siguiente iteraci√≥n",
        "in": "Comprueba si un elemento est√° en una secuencia",
        "is": "Compara identidad de objetos",
        "def": "Define una funci√≥n",
        "return": "Devuelve un valor desde una funci√≥n",
        "class": "Define una clase",
        "try": "Inicia bloque con manejo de errores",
        "except": "Captura el error",
        "finally": "Bloque que siempre se ejecuta",
        "raise": "Lanza una excepci√≥n",
        "import": "Importa m√≥dulos",
        "from": "Importa partes espec√≠ficas de un m√≥dulo",
        "as": "Renombra m√≥dulo al importarlo",
        "with": "Manejo de contexto (ej. archivos)",
        "lambda": "Funci√≥n an√≥nima en una sola l√≠nea",
        "global": "Declara variables globales",
        "nonlocal": "Declara variables en √°mbito superior",
        "pass": "No hace nada (placeholder)",
        "del": "Elimina variable u objeto",
        "yield": "Devuelve valor en generadores",
        "assert": "Verifica una condici√≥n (debug/test)"
    }

    for palabra, descripcion in keywords.items():
        print(f"{palabra:<10} -> {descripcion}")

    print("\n=== ‚ö° Funciones integradas m√°s usadas ===\n")
    funciones = {
        "print()": "Muestra informaci√≥n en pantalla",
        "input()": "Recibe datos del usuario",
        "int()": "Convierte a n√∫mero entero",
        "float()": "Convierte a n√∫mero decimal",
        "str()": "Convierte a texto",
        "len()": "Devuelve longitud de listas, cadenas, etc.",
        "type()": "Devuelve el tipo de dato",
        "range()": "Genera secuencia de n√∫meros",
        "list()": "Crea una lista",
        "dict()": "Crea un diccionario",
        "set()": "Crea un conjunto (sin duplicados)",
        "tuple()": "Crea una tupla (inmutable)",
        "sum()": "Suma elementos de una colecci√≥n",
        "min()": "Devuelve el valor m√≠nimo",
        "max()": "Devuelve el valor m√°ximo",
        "abs()": "Valor absoluto",
        "round()": "Redondea un n√∫mero",
        "sorted()": "Ordena una lista",
        "help()": "Muestra ayuda sobre funciones/objetos"
    }

    for funcion, descripcion in funciones.items():
        print(f"{funcion:<10} -> {descripcion}")


if __name__ == "__main__":
    mostrar_tabla()
